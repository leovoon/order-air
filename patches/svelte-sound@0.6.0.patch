diff --git a/dist/svelte-sound.js b/dist/svelte-sound.js
index 7f7eb48e9246e4ce611d2164dcabb94aedcca7f7..d232e806e5a1909a85c8227057427d20d000bd80 100644
--- a/dist/svelte-sound.js
+++ b/dist/svelte-sound.js
@@ -1,5 +1,8 @@
 var __defProp = Object.defineProperty;
-var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
+var __defNormalProp = (obj, key, value) =>
+  key in obj
+    ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value })
+    : (obj[key] = value);
 var __publicField = (obj, key, value) => {
   __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
   return value;
@@ -27,7 +30,7 @@ class Sound {
       src: this.src,
       loop: loop || false,
       volume: volume || 1,
-      ...this.options
+      ...this.options,
     });
     this.howl = sound2;
   }
@@ -103,6 +106,7 @@ class SvelteSound extends Sound {
    * @param options The new options to configure the sound player.
    */
   update(options) {
+    if (!this) return;
     this.removeEventListeners();
     super.update(options);
     this.attachControls();
@@ -111,18 +115,16 @@ class SvelteSound extends Sound {
    * Destroys the sound player and removes all event listeners.
    */
   destroy() {
+    if (!this) return;
     this.removeEventListeners();
     super.destroy();
   }
 }
 function sound(node, options) {
+  if (!node) return;
   return new SvelteSound(node, options);
 }
 function useSound(src, events, options) {
   return (node, overrideOptions) => new SvelteSound(node, { src, events, ...options, ...overrideOptions });
 }
-export {
-  Sound,
-  sound,
-  useSound
-};
+export { Sound, sound, useSound };
diff --git a/src/sound.ts b/src/sound.ts
index df2ecb689da4716e3184f38b0d26c9f8b0400f5f..678491b9569a21b50fb19fa55f405b3ee9148d0d 100644
--- a/src/sound.ts
+++ b/src/sound.ts
@@ -165,6 +165,7 @@ class SvelteSound extends Sound {
    * @param options The new options to configure the sound player.
    */
   update(options: Parameters<Sound["update"]>[0]) {
+    if (!this) return;
     this.removeEventListeners();
     super.update(options);
     this.attachControls();
@@ -174,6 +175,7 @@ class SvelteSound extends Sound {
    * Destroys the sound player and removes all event listeners.
    */
   destroy() {
+    if (!this) return;
     this.removeEventListeners();
     super.destroy();
   }
@@ -186,6 +188,7 @@ class SvelteSound extends Sound {
  * @returns A new Sound instance.
  */
 export function sound(node: HTMLElement, options: Options) {
+  if (!node) return;
   return new SvelteSound(node, options);
 }
 
@@ -196,11 +199,7 @@ export function sound(node: HTMLElement, options: Options) {
  * @param options The options to configure the sound player.
  * @returns A function that creates a new Sound instance with the given options.
  */
-export function useSound(
-  src: SoundSource,
-  events: SoundEvents,
-  options?: SoundOptions
-) {
+export function useSound(src: SoundSource, events: SoundEvents, options?: SoundOptions) {
   return (node: HTMLElement, overrideOptions?: Partial<Options>) =>
     new SvelteSound(node, { src, events, ...options, ...overrideOptions });
 }
